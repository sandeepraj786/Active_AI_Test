- name: Create AWS resources
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - "vars/variables.yml"
    - "vars/app-server.yml"
  tasks:
    #Gather facts related to target group
    - name: Gather facts related to target group
      elb_target_group_info:
        names:
          - '{{ app_name }}-ecs-tg'
        region: 'us-east-2'
      register: ecs_tg
    - debug: var=ecs_tg verbosity=2

    #Gather facts related to load-balancer
    - name: Gather facts related to load balancer
      elb_application_lb_info:
        names:
          - '{{ app_name }}-ecs-lb'
      register: ecs_lb
    - debug: var=ecs_lb verbosity=2

    #Create a Target group for the above ALB
    - name: Create target group for ALB to manage traffic to ECS cluster
      when: '(ecs_tg.target_groups| length == 0)'
      elb_target_group:
        name: '{{ app_name }}-ecs-tg'
        vpc_id: '{{ vpc_id }}'
        target_type: instance
        protocol: HTTP
        port: '{{ tg_port }}'
        health_check_path: '{{ tg_health_check_path }}'
        health_check_port: traffic-port
        health_check_protocol: http
        unhealthy_threshold_count: '{{ tg_unhealthy_threshold_count }}'
        healthy_threshold_count: '{{ tg_healthy_threshold_count }}'
        health_check_timeout: '{{ tg_health_check_timeout }}'
        health_check_interval: '{{ tg_health_check_interval }}'
        successful_response_codes: '{{tg_successful_response_codes}}'
        state: present
        tags:
          Name: '{{ app_name }}-ecs-tg'
          description: 'Active-ai target group'
          #application: 'retail'
          #environment: '{{ env }}'
      register: ecs_tg_new
    - debug: var=ecs_tg_new verbosity=2

    #Create a load balancer for ecs target group
    - name: Create a load balancer for ecs target group
      when: '(ecs_lb.load_balancers| length == 0)'
      elb_application_lb:
        name: '{{ app_name }}-ecs-lb'
        security_groups: '{{ security_group_id }}'
        subnets:
          - "{{ subnet_id_1 }}"
          - "{{ subnet_id_2 }}"
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ ecs_tg.target_groups[0].target_group_name if (ecs_tg.target_groups|length > 0) else ecs_tg_new.target_group_name}}"
        state: present
      register: ecs_lb_new
    - debug: var=ecs_lb_new verbosity=2

    #Create a Task definition for our container
    - name: Create a task definition for ecs
      tags: create_td
      ecs_taskdefinition:
        state: present
        family: '{{ app_name }}'
        network_mode: bridge
        force_create: true
        #execution_role_arn: 'arn:aws:iam::522246307890:role/ecsInstanceRole'
        containers:
          - name: '{{ app_name }}-container'
            essential: true
            image: '{{ app_image }}'
            cpu: "{{task_cpu}}"
            memory: "{{task_memory}}"
            environment:
              - name: "{{host_name}}"
                value: "{{host}}"
            portMappings:
              - containerPort: '{{ container_port }}'
                hostPort: '{{ container_port }}'
                protocol: 'tcp'
            mountPoints:
              - containerPath: '{{container_path1}}'
                sourceVolume: '{{volume_name1}}'
                when: mountPoints.container_path1 | length > 0 and mountPoints.volume_name1 | length > 0
              - containerPath: '{{container_path2}}'
                sourceVolume: '{{volume_name2}}'
                when: mountPoints.container_path2 | length > 0 and mountPoints.volume_name2 | length > 0
                
                
        volumes: 
          - name: '{{volume_name1}}'
            when: volumes.volume_name1 | length > 0
          - name: '{{volume_name2}}'
            when: volumes.volume_name2 | length > 0
            host:
              sourcePath: '{{source_path1}}'
              when: host.source_path1 | length > 0
              sourcePath: '{{source_path2}}'
              when: host.source_path2 | length > 0
      register: td
    - debug: var=td verbosity=2
    
    
    # Create a service using the task definition to be run under our ECS cluster
    - name: 'Create ECS Service for app - {{ app_name }} on ECS cluster - {{ cluster_name }}'
      tags: create_ecs_svc
      ecs_service:
        state: present
        name: '{{ app_name }}'
        launch_type: EC2
        force_new_deployment: yes
        cluster: '{{ cluster_name }}'
        task_definition: '{{ td.taskdefinition.family }}:{{ td.taskdefinition.revision }}'
        desired_count: 1
        # role: 'arn:aws:iam::522246307890:role/ecsServiceRole'
        placement_strategy:
          - type: spread
            field: attribute:ecs.availability-zone
        deployment_configuration:
          minimum_healthy_percent: '{{minimum_healthy_percent}}'
          maximum_percent: '{{maximum_percent}}'
        load_balancers:
          - targetGroupArn: '{{ ecs_tg.target_groups[0].target_group_arn if (ecs_tg.target_groups|length > 0) else ecs_tg_new.target_group_arn }}'
            containerName: '{{ app_name }}-container'
            containerPort: '{{ container_port }}'
      register: ecs_service
    - debug: var=ecs_service verbosity=2

