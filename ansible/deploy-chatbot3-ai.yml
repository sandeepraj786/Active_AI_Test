- name: Create AWS resources
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - '../vars/{{ env }}/variables.yml'
    - '../vars/{{ env }}/app.yml'
  tasks:
    - name: Initialize
      tags: Initialize the app properties and defaults
      set_fact:
         application: "{{ applications[app] }}"


    #Create a Task definition for our container
    - name: Create a task definition for ecs
      tags: create_td
      ecs_taskdefinition:
        state: present
        family: '{{ application.task_definition_name }}'
        network_mode: bridge
        force_create: true
        containers:
          - name: '{{ application.app_name }}'
            essential: true
            image: '{{ application.app_image }}'
            memory: "{{ application.memory_hard_limit}}"
            environment:
              - name: "{{application.host_name}}"
                value: "{{application.host}}"
            portMappings:
              - containerPort: '{{application.container_port }}'
                hostPort: '{{application.host_port }}'
                protocol: 'tcp'
            mountPoints:
              - containerPath: '{{application.container_path}}'
                sourceVolume: '{{application.volume_name}}'
        volumes: 
          - name: '{{application.volume_name}}'
            host:
              sourcePath: '{{application.source_path}}'
      register: td
    - debug: var=td verbosity=2
    
    
    # Create a service using the task definition to be run under our ECS cluster
    - name: 'Create ECS Service for app - {{ application.app_name }} on ECS cluster - {{ cluster_name }}'
      tags: create_ecs_svc
      ecs_service:
        state: present
        name: '{{ app }}'
        launch_type: EC2
        force_new_deployment: yes
        cluster: '{{ cluster_name }}'
        task_definition: '{{ td.taskdefinition.family }}:{{ td.taskdefinition.revision }}'
        desired_count: 1
        placement_strategy:
          - type: spread
            field: attribute:ecs.availability-zone
        deployment_configuration:
          minimum_healthy_percent: '{{minimum_healthy_percent}}'
          maximum_percent: '{{maximum_percent}}'
        load_balancers:
          - targetGroupArn: '{{ ecs_tg.target_groups[0].target_group_arn if (ecs_tg.target_groups|length > 0) else ecs_tg_new.target_group_arn }}'
            containerName: '{{ application.app_name }}'
            containerPort: '{{ application.container_port }}'
      register: ecs_service
    - debug: var=ecs_service verbosity=2